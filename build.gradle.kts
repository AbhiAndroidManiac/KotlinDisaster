plugins {
    /*changing the version of the kotlin from 1.8 to 2.0.20*/
    kotlin("jvm") version "2.0.20"
    application
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}
/** Together, these settings ensure that the Java code in your project is
 * compiled with features from Java 22 and that the generated bytecode
 * can be executed on a Java 22 JVM.**/
/*tasks.withType<JavaCompile>: This selects all tasks of type JavaCompile.
In a Gradle project, JavaCompile tasks are responsible for compiling
Java source files.

sourceCompatibility = "22": This sets the source compatibility to
Java version 22. It indicates that the source code is written using
the features available in Java 22, and the compiler will enforce this compatibility.

targetCompatibility = "22": This sets the target compatibility to
Java version 22. It tells the compiler to generate bytecode that
is compatible with Java 22, ensuring that the compiled classes
can run on a Java 22 runtime.*/
tasks.withType<JavaCompile> {
    sourceCompatibility = "22"
    targetCompatibility = "22"
}


dependencies {
    testImplementation(kotlin("test"))
    this.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1")
}

tasks.test {
    useJUnitPlatform()
}
/**Together, this configuration ensures that the Kotlin code in
 * your project is compiled to run on Java 22, using features and
 * optimizations available in that version.
 * It helps maintain compatibility between the Kotlin code and
 * the specified Java runtime version.**/
/*tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>: This selects
all tasks of type KotlinCompile.
These tasks are responsible for compiling Kotlin source files.

compilerOptions: This block allows you to specify various compiler options
for Kotlin compilation. Itâ€™s the new way to configure compiler settings
since the previous kotlinOptions is deprecated.

jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_22):

jvmTarget: This specifies the target JVM version for the Kotlin compiler.
set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_22): This sets the target
JVM version to Java 22. The JvmTarget enum provides a type-safe way to specify
the target JVM version.*/
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
    compilerOptions {
        // Set the JVM target correctly using the Property type
        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_22)
    }
}
/**This configuration ensures that the project uses the Java 22 toolchain
 * for compiling Java code, regardless of the default Java version on the system.
 * It helps maintain consistency and compatibility when building your project,
 * especially in environments where different Java versions may be present.**/
/*java { ... }: This is the Java plugin configuration block.
It allows you to configure various aspects of the Java compilation
process in your project.

toolchain { ... }: This block is used to specify the Java toolchain settings.
A toolchain allows you to define the version of the Java compiler,
runtime, and other tools that should be used for building the project,
independent of the Java version installed on the system.

languageVersion.set(JavaLanguageVersion.of(22)):

languageVersion: This property specifies the Java language version
to be used for compiling your project.
set(JavaLanguageVersion.of(22)): This sets the language version to Java 22,
meaning that the project will use features and syntax available in that version of Java.*/
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}
/**This configuration ensures that your Kotlin code is compiled with support
 * for Java 22 features, maintaining compatibility and allowing you to use
 * Java 22-specific language constructs. It provides consistency
 * in the development environment, especially when different Java
 * versions may be present on various machines.**/
/*kotlin { ... }: This block configures the Kotlin plugin for your project,
allowing you to set various options related to Kotlin compilation and execution.

jvmToolchain { ... }: This block specifies the settings for the Kotlin JVM toolchain.
The toolchain allows you to define the version of the JVM that the Kotlin compiler
should target, independent of what is installed on the machine.

languageVersion.set(JavaLanguageVersion.of(22)):

languageVersion: This property indicates the version of the Java language that
the Kotlin compiler should be compatible with.
set(JavaLanguageVersion.of(22)): This sets the Java language version to 22.
This means that the Kotlin compiler will use Java 22 language features and
ensure compatibility with that version.*/
kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

application {
    mainClass.set("Solution_B")
}